rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
# develop minimum perturbation set
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
new.tf <- tf.scores[1,]
tf.scores <- tf.scores[-c(1),]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
print(my.pert)
print(target.corr/init.corr)
if (target.corr/init.corr < target.over.init) {
my.pert <- my.pert[-c(1)]
} else {
target.over.init <- target.corr / init.corr
}
}
return(my.pert)
}
find.perts <- function(start.prof, target.prof, gene.net, simulator, slTool, n=0, nIter=300, suff.diff=1.5) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# weight gene scores by the gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
# develop minimum perturbation set
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
new.tf <- tf.scores[1,]
tf.scores <- tf.scores[-c(1),]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
print(my.pert)
print(target.corr/init.corr)
if (target.corr/init.corr < target.over.init) {
my.pert <- my.pert[-c(1)]
} else {
target.over.init <- target.corr / init.corr
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib, grn, simRegsProfilesPert, slObj)
tf.scores
tf.scores <- tf.scores[-c("Zfp326","Per1"),]
tf.scores <- tf.scores[!c("Zfp326","Per1"),]
my.pert <- 4
names(my.pert) <- "Per1"
tf.scores[rownames(tf.scores) !%in% names(my.pert),]
tf.scores[!rownames(tf.scores) %in% names(my.pert),]
find.perts <- function(start.prof, target.prof, gene.net, simulator, slTool, n=0, nIter=300, suff.diff=1.5) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# store gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
tf.cands <- tf.scores[!rownames(tf.scores) %in% names(pert)]
tf.cands <- tf.cands[order(-tf.cands$score),]
new.tf <- tf.cands[1,]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
print(my.pert)
print(target.corr/init.corr)
if (target.corr/init.corr < target.over.init) {
my.pert <- my.pert[-c(1)]
} else {
target.over.init <- target.corr / init.corr
stopifnot(sum(names(pert.prof)!=names(target.prof))==0)
tf.changes <- target.prof - pert.prof
tf.scores$dir <- sign(tf.changes)
tf.scores$score <- abs(tf.changes)
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib, grn, simRegsProfilesPert, slObj)
find.perts <- function(start.prof, target.prof, gene.net, simulator, slTool, n=0, nIter=300, suff.diff=1.5) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# store gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
tf.cands <- tf.scores[!rownames(tf.scores) %in% names(pert),]
tf.cands <- tf.cands[order(-tf.cands$score),]
new.tf <- tf.cands[1,]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
print(my.pert)
print(target.corr/init.corr)
if (target.corr/init.corr < target.over.init) {
my.pert <- my.pert[-c(1)]
} else {
target.over.init <- target.corr / init.corr
stopifnot(sum(names(pert.prof)!=names(target.prof))==0)
tf.changes <- target.prof - pert.prof
tf.scores$dir <- sign(tf.changes)
tf.scores$score <- abs(tf.changes)
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib, grn, simRegsProfilesPert, slObj)
start.prof <- esc
target.prof <- fib
gene.net <- grn
simulator <- simRegsProfilesPert()
simulator <- simRegsProfilesPert
slTool <- slObj
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
tf.changes <- target.prof - start.prof
# store gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
target.over.init <- 0
my.pert <- c()
find.perts <- function(start.prof, target.prof, gene.net=grn, simulator=simRegsProfilesPert, slTool=slObj, n=0, nIter=300, suff.diff=1.5) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# store gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
tf.cands <- tf.scores[!rownames(tf.scores) %in% names(pert),]
tf.cands <- tf.cands[order(-tf.cands$score),]
new.tf <- tf.cands[1,]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
print(my.pert)
print(target.corr/init.corr)
if (target.corr/init.corr < target.over.init) {
my.pert <- my.pert[-c(1)]
} else {
target.over.init <- target.corr / init.corr
stopifnot(sum(names(pert.prof)!=names(target.prof))==0)
tf.changes <- target.prof - pert.prof
tf.changes <- tf.changes * outdegs[names(esc),"Freq"]
tf.scores$dir <- sign(tf.changes)
tf.scores$score <- abs(tf.changes)
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib)
target.over.init <- 0
my.pert <- c()
tf.cands <- tf.scores[!rownames(tf.scores) %in% names(pert),]
tf.cands <- tf.cands[order(-tf.cands$score),]
View(tf.cands)
new.tf <- tf.cands[1,]
View(new.tf)
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
nIter=300
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
n=0
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
target.corr/init.corr
target.over.init <- target.corr / init.corr
stopifnot(sum(names(pert.prof)!=names(target.prof))==0)
tf.changes <- target.prof - pert.prof
tf.changes <- tf.changes * outdegs[names(esc),"Freq"]
View(tf.scores)
names(tf.changes)
?match
names(tf.changes)
find.perts <- function(start.prof, target.prof, gene.net=grn, simulator=simRegsProfilesPert, slTool=slObj, n=0, nIter=300, suff.diff=1.5) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# store gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
tf.cands <- tf.scores[!rownames(tf.scores) %in% names(pert),]
tf.cands <- tf.cands[order(-tf.cands$score),]
new.tf <- tf.cands[1,]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
print(my.pert)
print(target.corr/init.corr)
if (target.corr/init.corr <= target.over.init) {
my.pert <- my.pert[-c(1)]
} else {
target.over.init <- target.corr / init.corr
stopifnot(sum(names(pert.prof)!=names(target.prof))==0)
tf.changes <- target.prof - pert.prof
tf.changes <- tf.changes * outdegs[names(esc),"Freq"]
tf.changes <- tf.changes[match(names(tf.changes),rownames(tf.scores))]
tf.scores$dir <- sign(tf.changes)
tf.scores$score <- abs(tf.changes)
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib)
find.perts <- function(start.prof, target.prof, gene.net=grn, simulator=simRegsProfilesPert, slTool=slObj, n=0, nIter=300, suff.diff=1.5) {
tf.scores <- create_tf_scores(start.prof, target.prof)
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
tf.cands <- tf.scores[!rownames(tf.scores) %in% names(pert),]
new.tf <- tf.cands[1,]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
print(my.pert)
print(target.corr/init.corr)
if (target.corr/init.corr <= target.over.init) {
tf.scores <- tf.scores[rownames(tf.scores)!= names(my.pert)[length(my.pert)],]
my.pert <- my.pert[-c(1)]
} else {
target.over.init <- target.corr / init.corr
update_tf_scores(tf.scores, pert.prof, target.prof)
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib)
create_tf_scores <- function(start.prof, target.prof, gene.net=grn) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# store gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
return(tf.scores)
}
update_tf_scores <- function(tf.scores, curr.prof, target.prof, gene.net=grn) {
assert(names(target.prof) == rownames(tf.scores))
curr.prof <- curr.prof[match(names(curr.prof), names(target.prof))]
tf.changes <- target.prof - curr.prof
assert(names(tf.changes) == rownames(tf.scores))
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.changes <- tf.changes*outdegs[names(tf.changes),"Freq"]
tf.scores$dir <- sign(tf.changes)
tf.scores$score <- abs(tf.changes)
tf.scores <- tf.scores[order(-tf.scores$score),]
return(tf.scores)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib)
create_tf_scores <- function(start.prof, target.prof, gene.net=grn) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# store gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
return(tf.scores)
}
update_tf_scores <- function(tf.scores, curr.prof, target.prof, gene.net=grn) {
stopifnot(names(target.prof) == rownames(tf.scores))
curr.prof <- curr.prof[match(names(curr.prof), names(target.prof))]
tf.changes <- target.prof - curr.prof
stopifnot(names(tf.changes) == rownames(tf.scores))
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.changes <- tf.changes*outdegs[names(tf.changes),"Freq"]
tf.scores$dir <- sign(tf.changes)
tf.scores$score <- abs(tf.changes)
tf.scores <- tf.scores[order(-tf.scores$score),]
return(tf.scores)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib)
find.perts <- function(start.prof, target.prof, gene.net, simulator, slTool, n=0.1, nIter=300, suff.diff=1.5) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# weight gene scores by the gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
# develop minimum perturbation set
target.over.init <- Inf
my.pert <- c()
while (target.over.init < suff.diff) {
new.tf <- tf.scores[1,]
tf.scores <- tf.scores[-c(1),]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
if (target.corr/init.corr < target.over.init) {
my.pert <- my.pert[-c(1),]
} else {
target.over.init <- target.corr / init.corr
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib, grn, simRegsProfilesPert, slObj)
directed.pert
find.perts <- function(start.prof, target.prof, gene.net, simulator, slTool, n=0.1, nIter=300, suff.diff=1.5) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# weight gene scores by the gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
# develop minimum perturbation set
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
new.tf <- tf.scores[1,]
tf.scores <- tf.scores[-c(1),]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
if (target.corr/init.corr < target.over.init) {
my.pert <- my.pert[-c(1),]
} else {
target.over.init <- target.corr / init.corr
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib, grn, simRegsProfilesPert, slObj)
find.perts <- function(start.prof, target.prof, gene.net, simulator, slTool, n=0.1, nIter=300, suff.diff=1.5) {
# make sure the profiles have the same genes
stopifnot(sum(names(start.prof)!=names(target.prof))==0)
# initialize scores for genes based on how they need to change
tf.changes <- target.prof - start.prof
# weight gene scores by the gene out-degrees
outdegs <- data.frame(table(gene.net$TF))
rownames(outdegs) <- outdegs$Var1
outdegs$Var1 <- NULL
tf.scores <- data.frame(tf.changes*outdegs[names(esc),"Freq"])
colnames(tf.scores) <- "metric1"
tf.scores$dir <- sign(tf.scores$metric1)
tf.scores$score <- abs(tf.scores$metric1)
tf.scores$metric1 <- NULL
tf.scores <- tf.scores[order(-tf.scores$score),]
# develop minimum perturbation set
target.over.init <- 0
my.pert <- c()
while (target.over.init < suff.diff) {
new.tf <- tf.scores[1,]
tf.scores <- tf.scores[-c(1),]
my.pert <- c(my.pert, new.tf$dir)
names(my.pert)[length(my.pert)] <- rownames(new.tf)
# simulate
pert.prof <- simulator(slTool, start.prof, my.pert, noise=n, iter=nIter)[,nIter]
init.corr <- cor(pert.prof, start.prof)
target.corr <- cor(pert.prof, target.prof)
if (target.corr/init.corr < target.over.init) {
my.pert <- my.pert[-c(1)]
} else {
target.over.init <- target.corr / init.corr
}
}
return(my.pert)
}
fib <- expDat[,which(sampTab$description1=='fibroblast')[1]]
esc <- expDat[,which(sampTab$description1=='esc')[1]]
directed.pert <- find.perts(esc, fib, grn, simRegsProfilesPert, slObj)
